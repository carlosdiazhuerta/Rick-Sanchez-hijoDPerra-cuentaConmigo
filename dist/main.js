(()=>{"use strict";const a=Head,e="https://rickandmortyapi.com/api/character/",t=async a=>{const t=a?`${e}${a}`:e;try{const a=await fetch(t);return await a.json()}catch(a){console.error("Fetch Error",a)}},n=()=>location.hash.slice(1).toLowerCase().split("/")[1]||"/",s=()=>'\n        <section class="error404">\n            <img src="https://i.imgur.com/JvZnbG5.png">\n            <h2>¡Page not found!</h2>\n        </section>\n    ',c={"/":async()=>`\n        <div class="characters">\n            ${(await t()).results.map((a=>`\n                <article class="characters-item">\n                    <a href="#/${a.id}/">\n                        <img data-src="${a.image}" alt="${a.name}">\n                        <h2 class="character-name">${a.name}</h2>\n                    </a>\n                </article> \n            `)).join("")}\n        </div>\n    `,"/:id":async()=>{const a=n(),e=await t(a);return e.image?`\n            <section class="characters-inner">\n                <article class="characters-card">\n                    <img src="${e.image}" alt="${e.name}">\n                    <h2>${e.name}</h2>\n                </article>\n                <article class="characters-card">\n                    <h3>Episodes: <span>${e.episode.length}</span></h3>\n                    <h3>Status: <span>${e.status}</span></h3>\n                    <h3>Species: <span>${e.species}</span></h3>\n                    <h3>Gender: <span>${e.gender}</span></h3>\n                    <h3>Origin: <span>${e.origin.name}</span></h3>\n                    <h3>Last Location: <span>${e.location.name}</span></h3>\n                </article>\n            </section>\n        `:"<p>Error: No se encontró una imagen para este personaje.</p>"},"/contact":"Contact"},r=async()=>{const e=document.getElementById("header"),r=document.getElementById("content");e.innerHTML=await a();let i=n(),o=await(a=>a.length<=3?"/"===a?a:"/:id":`/${a}`)(i),d=c[o]?c[o]:s;r.innerHTML=await d();let l=1;const h=r.querySelectorAll("img[data-src]"),m=new IntersectionObserver((function(a){a.forEach((a=>{a.isIntersecting&&(a.target.src=a.target.dataset.src)}))}));h.forEach((a=>{m.observe(a)})),window.addEventListener("scroll",(()=>{const a=r.offsetHeight;window.pageYOffset+window.innerHeight>=a&&async function(){l++;const a=(await t(`?page=${l}`)).results.map((a=>`\n            <article class="characters-item">\n                <a href="#/${a.id}/">\n                    <img data-src="${a.image}" alt="${a.name}">\n                    <h2 class="character-name">${a.name}</h2>\n                </a>\n            </article>\n        `)).join("");r.querySelector(".characters").innerHTML+=a,r.querySelectorAll(".characters-item img[data-src]").forEach((a=>{m.observe(a)}))}()}));const g=e.querySelector("#switch");g.addEventListener("click",(()=>{document.body.classList.toggle("dark"),g.classList.toggle("active"),document.body.classList.contains("dark")?localStorage.setItem("dark-mode","true"):localStorage.setItem("dark-mode","false")})),"true"===localStorage.getItem("dark-mode")?(document.body.classList.add("dark"),g.classList.add("active")):(document.body.classList.remove("dark"),g.classList.remove("active"))};window.addEventListener("load",r),window.addEventListener("hashchange",r)})();
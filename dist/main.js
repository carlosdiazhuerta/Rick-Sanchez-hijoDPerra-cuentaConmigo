(()=>{"use strict";const a="https://rickandmortyapi.com/api/character/",e=async e=>{const n=e?`${a}${e}`:a;try{const a=await fetch(n);return await a.json()}catch(a){console.error("Fetch Error",a)}},n=()=>location.hash.slice(1).toLowerCase().split("/")[1]||"/",t=()=>'\n        <section class="error404">\n            <img src="https://i.imgur.com/JvZnbG5.png">\n            <h2>¡Page not found!</h2>\n        </section>\n    ',s={"/":async()=>`\n        <div class="characters">\n            ${(await e()).results.map((a=>`\n                <article class="characters-item">\n                    <a href="#/${a.id}/">\n                        <img data-src="${a.image}" alt="${a.name}">\n                        <h2 class="character-name">${a.name}</h2>\n                    </a>\n                </article> \n            `)).join("")}\n        </div>\n    `,"/:id":async()=>{const a=n(),t=await e(a);return t.image?`\n            <section class="characters-inner">\n                <article class="characters-card">\n                    <img src="${t.image}" alt="${t.name}">\n                    <h2>${t.name}</h2>\n                </article>\n                <article class="characters-card">\n                    <h3>Episodes: <span>${t.episode.length}</span></h3>\n                    <h3>Status: <span>${t.status}</span></h3>\n                    <h3>Species: <span>${t.species}</span></h3>\n                    <h3>Gender: <span>${t.gender}</span></h3>\n                    <h3>Origin: <span>${t.origin.name}</span></h3>\n                    <h3>Last Location: <span>${t.location.name}</span></h3>\n                </article>\n            </section>\n        `:"<p>Error: No se encontró una imagen para este personaje.</p>"},"/contact":"Contact"},c=async()=>{const a=document.getElementById("header"),c=document.getElementById("content");a.innerHTML=await'\n        <header class="header-main">\n            <div class="header-logo">\n                <a href="#"><img src="https://i.imgur.com/7utDxm8.png" alt="Rick and Morty"></a>\n            </div>\n            <nav class="header-nav">\n                <a href="#/about/" class="nav-element">About</a>\n                <button class="switch" id="switch">\n                    <span><i class="fas fa-sun"></i></span>\n                    <span><i class="fas fa-moon"></i></span>\n                </button>\n            </nav>\n        </header>\n    ';let r=n(),i=await(a=>a.length<=3?"/"===a?a:"/:id":`/${a}`)(r),o=s[i]?s[i]:t;c.innerHTML=await o();let l=1;const d=c.querySelectorAll("img[data-src]"),h=new IntersectionObserver((function(a){a.forEach((a=>{a.isIntersecting&&(a.target.src=a.target.dataset.src)}))}));d.forEach((a=>{h.observe(a)})),window.addEventListener("scroll",(()=>{const a=c.offsetHeight;window.pageYOffset+window.innerHeight>=a&&async function(){l++;const a=(await e(`?page=${l}`)).results.map((a=>`\n            <article class="characters-item">\n                <a href="#/${a.id}/">\n                    <img data-src="${a.image}" alt="${a.name}">\n                    <h2 class="character-name">${a.name}</h2>\n                </a>\n            </article>\n        `)).join("");c.querySelector(".characters").innerHTML+=a,c.querySelectorAll(".characters-item img[data-src]").forEach((a=>{h.observe(a)}))}()}));const m=a.querySelector("#switch");m.addEventListener("click",(()=>{document.body.classList.toggle("dark"),m.classList.toggle("active"),document.body.classList.contains("dark")?localStorage.setItem("dark-mode","true"):localStorage.setItem("dark-mode","false")})),"true"===localStorage.getItem("dark-mode")?(document.body.classList.add("dark"),m.classList.add("active")):(document.body.classList.remove("dark"),m.classList.remove("active"))};window.addEventListener("load",c),window.addEventListener("hashchange",c)})();